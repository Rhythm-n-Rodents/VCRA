function conn_neig_dist_rank = fun_analysis_get_connected_node_neighbor_distance_ranking(vessel_graph, ...
    node_label, node_dt_to_all_nodes, sortedQ)
% fun_analysis_get_connected_node_neighbor_distance_ranking computes the
% rank of the connected nodes of a node in the distance between the node to
% all its neighboring nodes. 
% Input: 
%   vessel_graph: structure generated by fun_skeleton_to_graph
%   node_label: label of the node to compute this feature
%   node_dt_to_all_nodes: numerical vector, distance between the node
%   (node_lable) to all the other nodes in the graph
% Output: 
%   conn_neig_dist_rank: numerical column vector, whose i-th element is the
%   rank of its i-th connected neighbor (excluding itself) in all its
%   neighboring nodes. 
% Implemented by Xiang Ji on 10/24/2019
if nargin < 4
    sortedQ = true;
end

connected_link_label = vessel_graph.node.connected_link_label{node_label};
connected_node_label = vessel_graph.link.connected_node_label(...
    connected_link_label, :);
connected_node_label = connected_node_label(connected_node_label ~= node_label);
num_conn_neigh = numel(connected_node_label);
conn_neig_dist_rank = nan(num_conn_neigh, 1);
for iter_neighbor = 1 : num_conn_neigh
    tmp_neighbor_label = connected_node_label(iter_neighbor);
    if tmp_neighbor_label == 0        
        % Skip the link with endpoint at the moment;
        continue;
    else
        conn_neig_dist_rank(iter_neighbor) = nnz(node_dt_to_all_nodes < ...
            node_dt_to_all_nodes(tmp_neighbor_label));
    end
end
if sortedQ
    conn_neig_dist_rank = sort(conn_neig_dist_rank, 'ascend');
end
end