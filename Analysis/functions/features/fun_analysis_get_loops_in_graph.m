function loop_str = fun_analysis_get_loops_in_graph(graph_str, distance_type)
% fun_analysis_get_loops_in_graph finds loops in the graph and compute
% loop length
% Input: 
%   graph_str: structure generated by fun_analysis_get_connectivity_graph
%   distance_type: string, one of {'geodesic', 'euclidean'}
% Output:
%   loop_str: structure with fields:
%       link_label: numerical vector, label of link
%       loop_node_label: cell array, labels of the nodes in the loop
%       loop_link_label:  cell array, labels of the links in the loop
%       num_loop: numerical scalar, number of loop found 
%       loop_length: numerical vector, sum of the euclidean length of the loop
%       loop_geodesic_length: numerical vector, number of edges in the loop
%
% Note: 
% 1. This function only work for undirected graph
% 2. This function assume the graph does not have self-loop
% 3. This function works for multiedge graph. 
% 4. The computation bottleneck is removing the edge from the graph. ( ~
% 85% of the computational time) 
% Implemented by Xiang Ji on 02/25/2019
if nargin < 2
    distance_type = 'geodesic';
end

test_node_pair = graph_str.used_node_label_pair;
num_edge = size(test_node_pair, 1);

loop_node_label_cell = cell(num_edge, 1);
loop_link_label_cell = cell(num_edge, 1);
path_geodesic_length = zeros(num_edge, 1);
path_length = zeros(num_edge, 1);

switch distance_type
    case 'geodesic'
        used_graph = graph_str.graph_uw;
    case 'euclidean'
        used_graph = graph_str.graph_w;
end
bilink_loop_str = graph_str.bilink_loop;
bilink_loop_type1_link_label = bilink_loop_str.link_label_pair(:);
bilink_loop_type2_link_label = cat(1, bilink_loop_str.link_label_pair_ge_3{:});
num_bilink_loop_type2 = numel(bilink_loop_str.link_label_pair_ge_3);
is_bilink_loop_type1_link = false(num_edge, 1);
is_bilink_loop_type2_link = false(num_edge, 1);
for iter_edge = 1 : num_edge
    tmp_node_pair = test_node_pair(iter_edge, :);
    tmp_link_label = full(graph_str.A_link_label(tmp_node_pair(1), tmp_node_pair(2)));
    tmp_is_bilink_loop_type_1 = any(bilink_loop_type1_link_label == tmp_link_label);
    tmp_is_bilink_loop_type_2 = any(bilink_loop_type2_link_label == tmp_link_label);  
    is_bilink_loop_type1_link(iter_edge) = tmp_is_bilink_loop_type_1;
    is_bilink_loop_type2_link(iter_edge) = tmp_is_bilink_loop_type_2;
    if ~is_bilink_loop_type1_link(iter_edge) && ~is_bilink_loop_type2_link(iter_edge)
        test_graph = rmedge(used_graph, test_node_pair(iter_edge, 1), test_node_pair(iter_edge, 2));
        switch distance_type
            case 'geodesic'
                [tmp_path, path_geodesic_length(iter_edge)] = shortestpath(test_graph, ...
                    test_node_pair(iter_edge, 1), test_node_pair(iter_edge, 2));
                if ~isempty(tmp_path)
                    loop_node_label_cell{iter_edge} = tmp_path;
                    % Add the removed link back to the loop               
                    tmp_ind = sub2ind(graph_str.Adj_mat_size, tmp_path, circshift(tmp_path, 1));
                    path_length(iter_edge) = sum(full(graph_str.A_weighted(tmp_ind)));
                    path_geodesic_length(iter_edge) = path_geodesic_length(iter_edge) + 1;
                    loop_link_label_cell{iter_edge} = full(graph_str.A_link_label(tmp_ind));
                else
                    path_length(iter_edge) = inf;
                end
            case 'euclidean'
                [tmp_path, path_length(iter_edge)] = shortestpath(test_graph, ...
                    test_node_pair(iter_edge, 1), test_node_pair(iter_edge, 2));
                loop_node_label_cell{iter_edge} = tmp_path;
                if isempty(tmp_path)
                    path_geodesic_length(iter_edge) = inf;
                else
                    path_geodesic_length(iter_edge) = numel(tmp_path);
                end
                path_length(iter_edge) = path_length(iter_edge) + graph_str.used_link_length(iter_edge);
                
                tmp_ind = sub2ind(graph_str.Adj_mat_size, tmp_path, circshift(tmp_path, 1));
                loop_link_label_cell{iter_edge} = full(graph_str.A_link_label(tmp_ind));
        end
    elseif tmp_is_bilink_loop_type_1
        [tmp_sub1, ~] = find(bilink_loop_str.link_label_pair == tmp_link_label);
        loop_node_label_cell{iter_edge} = bilink_loop_str.connected_node_label(tmp_sub1, :);
        path_geodesic_length(iter_edge) = 2;
        path_length(iter_edge) = sum(bilink_loop_str.link_length_pair(tmp_sub1,:));
        loop_link_label_cell{iter_edge} = bilink_loop_str.link_label_pair(tmp_sub1,:);
        
    elseif tmp_is_bilink_loop_type_2
        path_geodesic_length(iter_edge) = 2;
        for iter = 1 : num_bilink_loop_type2
            tmp_label = bilink_loop_str.link_label_pair_ge_3{iter};
            tmp_Q = (tmp_link_label == tmp_label); 
            if any(tmp_Q)
                loop_node_label_cell{iter_edge} = bilink_loop_str.connected_node_label_ge_3(iter,:);
                tmp_link_length_list = bilink_loop_str.link_length_pair_ge_3{iter};
                tmp_link_length_1 = tmp_link_length_list(tmp_Q);
                tmp_idx = find(~tmp_Q);
                [tmp_link_length_2, tmp_min_idx]= min(tmp_link_length_list(~tmp_Q));
                path_length(iter_edge) = tmp_link_length_1 + tmp_link_length_2;
                loop_link_label_cell{iter_edge} = [tmp_link_label, tmp_label(tmp_idx(tmp_min_idx))];
                break;
            end
        end                
    end
end
no_path_Q = isinf(path_length);
loop_str.link_label = graph_str.used_link_label;
loop_str.loop_node_label = loop_node_label_cell;
loop_str.loop_link_label = loop_link_label_cell;
loop_str.num_loop = nnz(~no_path_Q);
loop_str.loop_length = path_length;
loop_str.loop_geodesic_length = path_geodesic_length;

end