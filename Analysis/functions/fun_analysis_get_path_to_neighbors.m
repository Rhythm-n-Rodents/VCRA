function path_str = fun_analysis_get_path_to_neighbors(weighted_graph, neighbor_node_cell_array)
%fun_analysis_get_path_to_neighbors finds path to (nearest) neighbor node
%and compute the physical path length and geodesic path length. 
% Input: 
%   weighted_graph: weighted graph, one of the field of the graph structure
%   generated by fun_analysis_get_connectivity_graph
%   neighbor_node_cell_array: cell array, the i-th cell contains the label of
%   the neighbor node of the i-th node. This input should be 
%   vessel_graph.node.features.neighbor_node_label
% Output:
%   path_str: strcutre with fields. 
%
% Implemented by Xiang Ji on 02/26/2019
%
path_str = struct;
num_node = numel(neighbor_node_cell_array);
neighbor_path_geodesic_length = cell(num_node, 1);
neighbor_path_length = cell(num_node, 1);
nearest_neighbor_path = cell(num_node, 1);
nearest_neighbor_path_length = nan(num_node, 1);
nearest_neighbor_path_geodesic_length = nan(num_node, 1);

for iter_node = 1 : num_node
    tmp_neighbor_node_label = neighbor_node_cell_array{iter_node};
    tmp_num_neighbor = numel(tmp_neighbor_node_label);
    if tmp_num_neighbor > 0
        tmp_path_length_list = nan(tmp_num_neighbor, 1);
        tmp_path_geodesic_length_list = nan(tmp_num_neighbor, 1);
        for iter_neighbor = 1 : tmp_num_neighbor
            [tmp_node_path, tmp_path_length] = shortestpath(weighted_graph, ...
                iter_node, tmp_neighbor_node_label(iter_neighbor), 'Method', 'positive');
            tmp_num_node = numel(tmp_node_path);
            if tmp_num_node > 0
                tmp_path_geodesic_length_list(iter_neighbor) = tmp_num_node - 1;
                tmp_path_length_list(iter_neighbor) = tmp_path_length;
                if iter_neighbor == 1
                    % Assume the first node is the nearest neighbor
                    nearest_neighbor_path{iter_node} = tmp_node_path;
                    nearest_neighbor_path_length(iter_node) = tmp_path_length;
                    nearest_neighbor_path_geodesic_length(iter_node) = tmp_path_geodesic_length_list(iter_neighbor);
                end                
            end
        end
        neighbor_path_geodesic_length{iter_node} = tmp_path_geodesic_length_list;
        neighbor_path_length{iter_node} = tmp_path_length_list;
    end    
end
path_str.path_to_neighbor_length = neighbor_path_length;
path_str.path_to_neighbor_geodesic_length = neighbor_path_geodesic_length;
path_str.path_to_nearest_neighbor = nearest_neighbor_path;
path_str.path_to_nearest_neighbor_length = nearest_neighbor_path_length;
path_str.path_to_nearest_neighbor_geodesic_length = nearest_neighbor_path_geodesic_length;

end