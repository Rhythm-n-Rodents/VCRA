function [node_cc_label, link_cc_label] = fun_graph_get_connected_component_label_for_nodes(vessel_graph)
% fun_graph_get_connected_component_label_for_nodes finds the connected
% components of nodes in the vessel graph. When the labeling algorithm
% stops, all the node in the vessel graph would be labeled, but the
% isolated links will not be labeled. 
% Input: 
%   vessel_graph: structure, generated by fun_skeleton_to_graph
% Output: 
%   node_cc_label: N-by-1 numerical vector, where N is the number of nodes
%   in the vessel graph. 
%   link_cc_label: N-by-1 numerical vector, where N is the number of links
%   in the vessel graph. For isolated link, the label is NaN.
%
% Implemented by Xiang Ji on 07/24/2019

node_cc_label = nan(vessel_graph.node.num_cc, 1);
link_cc_label = nan(vessel_graph.link.num_cc, 1);
current_cc_label = 1;
for iter_node = 1 : vessel_graph.node.num_cc
    if isnan(node_cc_label(iter_node))
        tmp_connected_node_label = iter_node;
        while ~isempty(tmp_connected_node_label)
           % Label the current node
            node_cc_label(tmp_connected_node_label) = current_cc_label;
           % Get the connected links
           tmp_connected_link_label = cat(1, vessel_graph.node.connected_link_label{tmp_connected_node_label});
           % Label the connected links
           if ~isempty(tmp_connected_link_label)
               link_cc_label(tmp_connected_link_label) = current_cc_label;
           end           
           % Get the connected node
           tmp_connected_node_label = vessel_graph.link.connected_node_label(...
               tmp_connected_link_label, :);
           % Remove the endpoints
           tmp_connected_node_label = tmp_connected_node_label(tmp_connected_node_label > 0);
           tmp_connected_node_label = tmp_connected_node_label(...
               isnan(node_cc_label(tmp_connected_node_label)));
        end
        current_cc_label = current_cc_label + 1;
    end
end
%% Check
assert(all(~isnan(node_cc_label)), 'Exist unlabeled nodes');
end