function trace_str = fun_graph_trace_along_link_from_a_node_no_conflict(vessel_graph, link_label, node_label, tracing_order, min_radius, map_ind_to_class)
% fun_grpah_trace_along_link_from_a_node find the downstream links and
% nodes label for a given link, start from one of its nodes. 
% Input: 
%   vessel_graph: structure generated by fun_skeleton_to_graph and
%   fun_graph_add_radius;
%   link_label: numerical scalar, label of the link in the vessel graph
%   node_label: numerical scalar, label of the node in the vessel graph
%   tracing_order: the maximum order of downstream links to trace
%   min_radius: if not 0, only trace the links that have median radius
%   greater than this threshold
%   map_ind_to_class: sparse vector, map the linear indices of the voxel to
%   its class ( 1 = unlabeled, 2 = artery, 3 = vein ) 
% Output: 
%   trace_str: structure with fields: 
%       link_label_at_level: cell array, the i-th cell contains the
%       downstream link label at order i;
%       node_label_at_level: cell array, the i-th cell contains the
%       downstream node label at order i;
% Implemented by Xiang Ji on 07/17/2019

if nargin < 5
    min_radius = 0;
end
assert(tracing_order >= 1, 'Tracing order should be not smaller than 1');
trace_str = struct;
if isfinite(tracing_order)
    [trace_str.link_label_at_level, trace_str.node_label_at_level] = deal(cell(tracing_order, 1));
end
% Determine the class of the starting link
unlabeled_class_idx = 1;
start_link_cc_ind = vessel_graph.link.cc_ind{link_label};
start_link_class = unique(full(map_ind_to_class(start_link_cc_ind)));
if any(start_link_class == 0)
    warning('Exist voxel of class 0');
    start_link_class = start_link_class(start_link_class ~= 0);
end
if ~isscalar(start_link_class)
    error('The starting link has more than one class of voxel');
end

% Set the current link as level 1...
trace_str.node_label_at_level{1} = node_label;
first_order_link_label = vessel_graph.node.connected_link_label{node_label};
assert(any(first_order_link_label == link_label), sprintf('Node %d is not a node of link %d\n', ...
    node_label, link_label));
if min_radius > 0
    med_radius = cellfun(@(x) median(full(vessel_graph.radius(x))), vessel_graph.link.cc_ind(first_order_link_label));
    first_order_link_label = first_order_link_label(med_radius > min_radius);
end
first_order_link_label = first_order_link_label(first_order_link_label ~= link_label);
trace_str.link_label_at_level{1} = first_order_link_label;

current_level = 2;
while current_level <= tracing_order
    connected_node_label = vessel_graph.link.connected_node_label(trace_str.link_label_at_level{current_level - 1}, :);
    connected_node_label = connected_node_label(connected_node_label > 0);
    connected_node_label = setdiff(connected_node_label, cat(1, trace_str.node_label_at_level{1 : (current_level - 1)}), 'stable');
    
    connected_link_label = cat(1, vessel_graph.node.connected_link_label{connected_node_label});
    connected_link_label = setdiff(connected_link_label, cat(1, trace_str.link_label_at_level{1 : (current_level - 1)}), 'stable');
    
    connected_link_cc_ind = vessel_graph.link.cc_ind(connected_link_label);
    valid_Q = true(size(connected_link_cc_ind));
    for iter_cc = 1 : numel(connected_link_cc_ind)
        tmp_cc_class = unique(full(map_ind_to_class(connected_link_cc_ind{iter_cc})));
        tmp_cc_class = setdiff(tmp_cc_class, [0; unlabeled_class_idx; first_order_link_label(:)]);
        if ~isempty(tmp_cc_class)
            valid_Q(iter_cc) = false;
        end 
        if min_radius > 0
            med_radius = median(full(vessel_graph.radius( connected_link_cc_ind{iter_cc} )));
            valid_Q(iter_cc) = med_radius > min_radius;
        end
    end
    connected_link_label = connected_link_label(valid_Q);
    if isempty(connected_node_label) || isempty(connected_link_label)
        break;
    end
    trace_str.node_label_at_level{current_level} = connected_node_label;
    trace_str.link_label_at_level{current_level} = connected_link_label;
    current_level = current_level + 1;
end
trace_str.link_label = cat(1, trace_str.link_label_at_level{:});
trace_str.node_label = cat(1, trace_str.node_label_at_level{:});
trace_str.max_level = numel(trace_str.link_label_at_level);
trace_str.link_order = repelem(1:trace_str.max_level, cellfun(@numel, trace_str.link_label_at_level)).';
trace_str.node_order = repelem(1:trace_str.max_level, cellfun(@numel, trace_str.node_label_at_level)).';
end