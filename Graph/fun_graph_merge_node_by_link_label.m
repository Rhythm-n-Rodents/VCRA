function input_graph = fun_graph_merge_node_by_link_label(input_graph, link_label, ignore_self_loop_Q)
% fun_graph_merge_node_by_link_label convert the links, which are usually
% short, to be part of the node and update graph information 
% Input: 
%   input_graph: structure generated by fun_skeleton_to_graph
%   link_label: numerical vector, lable of the link to be merged. 
% Output: 
%   input_graph: updated structure
%
% Implemented by Xiang Ji on 02/18/2019
if nargin < 3
    ignore_self_loop_Q = true;
end
if isempty(link_label)
    return;
end
connected_node_pair = input_graph.link.connected_node_label(link_label, :);
% Check if links have free end(s)
no_endpoint_Q = all(connected_node_pair > 0, 2);
link_label = link_label(no_endpoint_Q);
connected_node_pair = connected_node_pair(no_endpoint_Q,:);
connected_node_pair = sort(connected_node_pair, 2, 'ascend');

for iter_link = 1 : numel(link_label)
    tmp_link_label = link_label(iter_link);
    tmp_node_pair = connected_node_pair(iter_link, :);
    tmp_kept_node_label = tmp_node_pair(1);
    tmp_deleted_node_label = tmp_node_pair(2);
    tmp_node_link_label_1 = input_graph.node.connected_link_label{tmp_kept_node_label};
    tmp_node_link_label_2 = input_graph.node.connected_link_label{tmp_deleted_node_label};
    % delete the node of greater label. The order here doesn't matter,
    % because it is a node. 
    tmp_kept_node_cc_ind = cat(1, input_graph.node.cc_ind{tmp_kept_node_label}, ...
        input_graph.link.cc_ind{tmp_link_label}, input_graph.node.cc_ind{tmp_deleted_node_label});
    % Merge the connected link labels of the two nodes
    tmp_kept_node_link_label = cat(1, tmp_node_link_label_1(tmp_node_link_label_1~=tmp_link_label), ...
        tmp_node_link_label_2(tmp_node_link_label_2~=tmp_link_label));
    if ignore_self_loop_Q
        tmp_kept_node_link_label_unique = unique(tmp_kept_node_link_label);
        if numel(tmp_kept_node_link_label_unique) ~= numel(tmp_kept_node_link_label)
            disp('Debug');
        end
    end
    % Update the connected link
    for tmp_iter_link = tmp_node_link_label_2(tmp_node_link_label_2~=tmp_link_label)'
        % Update the connected node information
        tmp_1 = input_graph.link.connected_node_label(tmp_iter_link,:);
        tmp_1(tmp_1 == tmp_deleted_node_label) = tmp_kept_node_label;
        input_graph.link.connected_node_label(tmp_iter_link, :) = tmp_1;
    end
    % Delete link
    input_graph.link.cc_ind{tmp_link_label} = [];
    input_graph.link.connected_node_label(tmp_link_label,:) = 0;
    % Delete node
    input_graph.node.cc_ind{tmp_deleted_node_label} = [];
    input_graph.node.connected_link_label{tmp_deleted_node_label} = [];
    % Update kept node
    input_graph.node.cc_ind{tmp_kept_node_label} = tmp_kept_node_cc_ind;
    input_graph.node.connected_link_label{tmp_kept_node_label} = tmp_kept_node_link_label;
end
input_graph = fun_graph_relabel(input_graph);
end